/**
 * material_blinnphong.vp
 * 
 * Vertex shader shader which writes material information needed for Blinn-Phong shading to
 * the gbuffer.
 * 
 * Written for Cornell CS 5625 (Interactive Computer Graphics).
 * Copyright (c) 2012, Computer Science Department, Cornell University.
 * 
 * @author Asher Dunn (ad488)
 * @date 2012-03-24
 */

/* Pass eyespace position and normal, and texcoord, to the fragment shader. */
varying vec3 EyespacePosition;
varying vec3 EyespaceNormal;
varying vec2 TexCoord;

const float SNOW_OCCL_SAMPLE_WIDTH = 3.0;
const float SNOW_BIAS = 7.6E-5;
const float PI = 3.14159265359;

uniform int RenderSnow;

uniform sampler2D SnowOcclMap;
uniform float SnowMapWidth;
uniform float SnowMapHeight;

uniform mat4 OcclMapMatrix;
uniform mat4 ViewMatrix;
uniform mat4 InverseViewMatrix;
uniform mat4 TransposeInverseViewMatrix;

uniform float SnowAmount;

//===================================================================================
//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }
//===============================================================================================

/** Returns a binary value for if this location is shadowed. 0 = shadowed, 1 = not shadowed.
 * helper for reading ShadowMap texture for PCF and PCSS
 */
float getShadowVal(vec4 shadowCoord, vec2 offset) {
	// shadowCoord is [0,1], need to convert to pixel
	vec2 textureCoord = vec2(shadowCoord.x*SnowMapWidth, shadowCoord.y*SnowMapHeight);
	textureCoord = textureCoord + offset;
	// converting back to [0,1] to read from texture
	textureCoord = vec2(textureCoord.x/SnowMapWidth, textureCoord.y/SnowMapHeight);
	return texture2D(SnowOcclMap, textureCoord).x;
}

float getPCFShadowMapVal(vec4 shadowCoord) {
	// count of occluded pixels
	float m = 0.0;
	for (float i = -SNOW_OCCL_SAMPLE_WIDTH; i <= SNOW_OCCL_SAMPLE_WIDTH; i += 1.0) {
 		for (float j = -SNOW_OCCL_SAMPLE_WIDTH; j <= SNOW_OCCL_SAMPLE_WIDTH; j += 1.0) {
			float shadowMapZValue = getShadowVal(shadowCoord, vec2(i, j));
			if (shadowCoord.z <= shadowMapZValue + SNOW_BIAS) {
		 		// unoccluded pixel
		 		m = m + 1.0;
		 	}
 		}
 	}
 	float n = pow(SNOW_OCCL_SAMPLE_WIDTH * 2.0 + 1.0, 2.0);
 	return m/n;
}

void main()
{
	if (RenderSnow == 1) {
		// calculate f_inc
		//vec4 worldSpaceNormal4 = InverseViewMatrix * gl_ProjectionMatrixInverse * vec4(normalize(gl_NormalMatrix * gl_Normal), 0.0);
		//worldSpaceNormal4 = worldSpaceNormal4 / worldSpaceNormal4.w;
		vec3 eyeSpaceNormal = normalize(gl_NormalMatrix * gl_Normal);
		vec4 worldSpaceUp = vec4(0.0, 1.0, 0.0, 0.0); // view * worldSpaceUp -> cameraSpaceUp
		vec4 eyeSpaceUp4 = TransposeInverseViewMatrix * worldSpaceUp;
		vec3 eyeSpaceUp = normalize(eyeSpaceUp4.xyz);
		float cos_theta = dot(eyeSpaceNormal, eyeSpaceUp);
		float theta = acos(cos_theta);
		float f_inc = 0.0;
		if (theta >= 0.0 && theta <= PI/2.0) {
			float n = snoise(gl_MultiTexCoord0);
			f_inc = cos_theta + n;
		}
		
		// calculate f_e (occlusion)
		vec4 eyeSpaceVertex = gl_ModelViewMatrix * gl_Vertex;
		mat4 biasMatrix = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);
		// OcclMapMatrix goes from world space to occlusionMap clip space
		// InverseViewMatrix goes from camera space to world space
		vec4 occlCoord = biasMatrix * OcclMapMatrix * InverseViewMatrix * eyeSpaceVertex;
		occlCoord = occlCoord/occlCoord.w;
		
		//float f_e = 0.0;
		float f_e = getPCFShadowMapVal(occlCoord);
		
		// calculate fp
		float f_p = f_inc;
		
		// once we have fp, scale the y direction up in world space according to fp's value
		vec4 worldSpaceVertex = InverseViewMatrix * eyeSpaceVertex;
		//worldSpaceVertex = worldSpaceVertex/worldSpaceVertex.w;
		float new_y = worldSpaceVertex.y + f_p * SnowAmount;
		//vec3 newVertex = eyeSpaceVertex.xyz + f_p * SnowAmount * eyeSpaceUp;
		eyeSpaceVertex = ViewMatrix * vec4(worldSpaceVertex.x, new_y, worldSpaceVertex.z, worldSpaceVertex.w);
		//eyeSpaceVertex = eyeSpaceVertex/eyeSpaceVertex.w;
		//vec4 clipVertex = gl_ProjectionMatrix * vec4(newVertex, 1.0);
		vec4 clipVertex = gl_ProjectionMatrix * eyeSpaceVertex;
		//clipVertex = clipVertex/clipVertex.w;
		gl_Position = clipVertex;
		EyespacePosition = eyeSpaceVertex.xyz;
	} else {
		gl_Position = ftransform();
		EyespacePosition = vec3(gl_ModelViewMatrix * gl_Vertex);
	}
	
	// TODO PA3 Prereq: Transform stuff into eye space and store in varyings.
	EyespaceNormal = normalize(gl_NormalMatrix * gl_Normal);
	TexCoord = vec2(gl_MultiTexCoord0);	
}
